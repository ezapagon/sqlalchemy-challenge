{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import re\n",
    "import datetime as dt\n",
    "\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func\n",
    "from sqlalchemy.sql import exists  \n",
    "\n",
    "from flask import Flask, jsonify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# connect to the DB\n",
    "engine = create_engine(\"sqlite:///sqlalchemy-challenge/Resources/hawaii.sqlite\")\n",
    "\n",
    "#reflect the tables into a clasess and save them\n",
    "\n",
    "DB = automap_base()\n",
    "DB.prepare(engine, reflect=True)\n",
    "\n",
    "#save reference to the tables\n",
    "\n",
    "Measurement = DB.classes.measurement\n",
    "Station = DB.classes.station\n",
    "# Create session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "# Flask Setup\n",
    "app = Flask(__name__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    return (\n",
    "        f\"Welcome to the Hawaii Climate Analysis API!<br/>\"\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation<br/>\"\n",
    "        f\"/api/v1.0/stations<br/>\"\n",
    "        f\"/api/v1.0/tobs<br/>\"\n",
    "        f\"/api/v1.0/temp/start/end\"\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert results to a dictionary using `date` as the key and `tobs` as the value\n",
    "@app.route(\"/api/v1.0/precipitation\") \n",
    "def precipitation():\n",
    "    # Create session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Query Measurement\n",
    "    results = (session.query(Measurement.date, Measurement.tobs)\n",
    "                      .order_by(Measurement.date))\n",
    "    \n",
    "    # Create a dictionary\n",
    "    precipitation_date_tobs = []\n",
    "    for each_row in results:\n",
    "        dt_dict = {}\n",
    "        dt_dict[\"date\"] = each_row.date\n",
    "        dt_dict[\"tobs\"] = each_row.tobs\n",
    "        precipitation_date_tobs.append(dt_dict)\n",
    "\n",
    "    return jsonify(precipitation_date_tobs)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    " #Return a JSON list of stations from the dataset\n",
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations():\n",
    "    # Create session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Query Stations\n",
    "    results = session.query(Station.name).all()\n",
    "\n",
    "    # Convert list of tuples into normal list\n",
    "    station_details = list(np.ravel(results))\n",
    "\n",
    "    return jsonify(station_details)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Query the dates and temperature observations of the most active station for the last year of data\n",
    "@app.route(\"/api/v1.0/tobs\")\n",
    "\n",
    "def tobs():\n",
    "    # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Query Measurements for latest date and calculate query_start_date\n",
    "    latest_date = (session.query(Measurement.date)\n",
    "                          .order_by(Measurement.date\n",
    "                          .desc())\n",
    "                          .first())\n",
    "    \n",
    "    latest_date_str = str(latest_date)\n",
    "    latest_date_str = re.sub(\"'|,\", \"\",latest_date_str)\n",
    "    latest_date_obj = dt.datetime.strptime(latest_date_str, '(%Y-%m-%d)')\n",
    "    query_start_date = dt.date(latest_date_obj.year, latest_date_obj.month, latest_date_obj.day) - dt.timedelta(days=366)\n",
    "     \n",
    "    # Query station names and their observation counts sorted descending and select most active station\n",
    "    q_station_list = (session.query(Measurement.station, func.count(Measurement.station))\n",
    "                             .group_by(Measurement.station)\n",
    "                             .order_by(func.count(Measurement.station).desc())\n",
    "                             .all())\n",
    "    \n",
    "    station_hno = q_station_list[0][0]\n",
    "    print(station_hno)\n",
    "\n",
    "\n",
    "    # Return a list of tobs for the year before the final date\n",
    "    results = (session.query(Measurement.station, Measurement.date, Measurement.tobs)\n",
    "                      .filter(Measurement.date >= query_start_date)\n",
    "                      .filter(Measurement.station == station_hno)\n",
    "                      .all())\n",
    "\n",
    "    # Create JSON results\n",
    "    tobs_list = []\n",
    "    for result in results:\n",
    "        line = {}\n",
    "        line[\"Date\"] = result[1]\n",
    "        line[\"Station\"] = result[0]\n",
    "        line[\"Temperature\"] = int(result[2])\n",
    "        tobs_list.append(line)\n",
    "\n",
    "    return jsonify(tobs_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 33)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m33\u001b[0m\n\u001b[0;31m    result_printout =( ['Entered Start Date: ' + start,\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "@app.route(\"/api/v1.0/<start>\") # Calculate `TMIN`, `TAVG`, and `TMAX` for all dates greater than and equal to the start date\n",
    "def start_only(start):\n",
    "\n",
    "    # Create session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Date Range (only for help to user in case date gets entered wrong)\n",
    "    date_range_max = session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "    date_range_max_str = str(date_range_max)\n",
    "    date_range_max_str = re.sub(\"'|,\", \"\",date_range_max_str)\n",
    "    print (date_range_max_str)\n",
    "\n",
    "    date_range_min = session.query(Measurement.date).first()\n",
    "    date_range_min_str = str(date_range_min)\n",
    "    date_range_min_str = re.sub(\"'|,\", \"\",date_range_min_str)\n",
    "    print (date_range_min_str)\n",
    "\n",
    "\n",
    "    # Check for valid entry of start date\n",
    "    valid_entry = session.query(exists().where(Measurement.date == start)).scalar()\n",
    " \n",
    "    if valid_entry:\n",
    "\n",
    "       results = (session.query(func.min(Measurement.tobs)\n",
    "                   ,func.avg(Measurement.tobs)\n",
    "                   ,func.max(Measurement.tobs))\n",
    "                   .filter(Measurement.date >= start).all())\n",
    "\n",
    "       tmin =results[0][0]\n",
    "       tavg ='{0:.4}'.format(results[0][1])\n",
    "       tmax =results[0][2]\n",
    "    \n",
    "      result_printout =( ['Entered Start Date: ' + start,\n",
    "                   'The lowest Temperature was: '  + str(tmin) + ' F',\n",
    "                   'The average Temperature was: ' + str(tavg) + ' F',\n",
    "                   'The highest Temperature was: ' + str(tmax) + ' F'])\n",
    "     return jsonify(result_printout)\n",
    "\n",
    "    return jsonify({\"error\": f\"Input Date {start} not valid. Date Range is {date_range_min_str} to {date_range_max_str}\"}), 404\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/api/v1.0/<start>/<end>\") # Calculate the `TMIN`, `TAVG`, and `TMAX` for dates between the start and end date inclusive\n",
    "def start_end(start, end):\n",
    "\n",
    "    # Create session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Date Range (only for help to user in case date gets entered wrong)\n",
    "    date_range_max = session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "    date_range_max_str = str(date_range_max)\n",
    "    date_range_max_str = re.sub(\"'|,\", \"\",date_range_max_str)\n",
    "    print (date_range_max_str)\n",
    "\n",
    "    date_range_min = session.query(Measurement.date).first()\n",
    "    date_range_min_str = str(date_range_min)\n",
    "    date_range_min_str = re.sub(\"'|,\", \"\",date_range_min_str)\n",
    "    print (date_range_min_str)\n",
    "\n",
    "    # Check for valid entry of start date\n",
    "    valid_entry_start = session.query(exists().where(Measurement.date == start)).scalar()\n",
    " \n",
    "    # Check for valid entry of end date\n",
    "    valid_entry_end = session.query(exists().where(Measurement.date == end)).scalar()\n",
    "\n",
    "    if valid_entry_start and valid_entry_end:\n",
    "\n",
    "       results = (session.query(func.min(Measurement.tobs)\n",
    "                  ,func.avg(Measurement.tobs)\n",
    "                  ,func.max(Measurement.tobs))\n",
    "                  .filter(Measurement.date >= start)\n",
    "                  .filter(Measurement.date <= end).all())\n",
    "\n",
    "      tmin =results[0][0]\n",
    "    tavg ='{0:.4}'.format(results[0][1])\n",
    "      tmax =results[0][2]\n",
    "    \n",
    "    result_printout =( ['Entered Start Date: ' + start,\n",
    "                       'Entered End Date: ' + end,\n",
    "                       'The lowest Temperature was: '  + str(tmin) + ' F',\n",
    "                       'The average Temperature was: ' + str(tavg) + ' F',\n",
    "                       'The highest Temperature was: ' + str(tmax) + ' F'])\n",
    "   return jsonify(result_printout)\n",
    "\n",
    "   \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " \n",
    "if __name__ == '__main__':\n",
    "    app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
